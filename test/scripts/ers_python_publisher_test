#!/usr/bin/env python3
import erskafka.ERSPublisher as erspub
from erskafka.ERSPublisher import ERSException, SeverityLevel  # import the custom exception and the SeverityLevel enum
from time import sleep
import click
import os

CONTEXT_SETTINGS = dict(help_option_names=['-h', '--help'])

@click.command(context_settings=CONTEXT_SETTINGS)
@click.option('--kafka-address', type=click.STRING, default="monkafka.cern.ch", help="Address of the Kafka broker.")
@click.option('--kafka-port', type=click.INT, default=30092, help='Port of the Kafka broker.')
@click.option('--number-of-issues', type=click.INT, default=10, help='Number of issues to send.')
@click.option('--kafka-topic', type=click.STRING, default="ers_stream", help="Name of the Kafka topic.")
@click.option('--session', type=click.STRING, default="session_tester", help="Name of the session")

def cli(kafka_address, kafka_port, number_of_issues, kafka_topic, session):
    os.environ['DUNEDAQ_PARTITION']=session
    bootstrap = f"{kafka_address}:{kafka_port}"
    publisher = erspub.ERSPublisher(
        bootstrap = bootstrap,
        topic = kafka_topic,
        application_name = "ers_python_publisher_test",
        package_name = "erskafka",
    )

    # Test 1: publish text messages
    for i in range(number_of_issues):
        message = f"Simple message with ID: {i}"
        print(f"Publishing simple message {i}: {message}")
        result = publisher.publish(message,severity=SeverityLevel((i%5)+1).name)
        print(f"Publish result for simple message {i}: {'successful' if result else 'failed'}")
        sleep(0.5)


    # Test 2: publish with Exception
    try:
        raise Exception("Custom ERS exception for testing publish_simple_message!")
    except Exception as e:
        print(f"Caught an ERSException: {e}")
        result = publisher.publish(e, severity=SeverityLevel.WARNING.name)
        print(f"Publishing exception message: {'successful' if result else 'failed'}")

    class CustomException(ERSException):
        pass

    # Test 3: publish with CustomException
    try:
        raise CustomException("Custom ERS exception for testing publish_simple_message!")
    except Exception as e:
        print(f"Caught an ERSException: {e}")
        result = publisher.publish(e, severity=SeverityLevel.WARNING.name)
        print(f"Publishing exception message: {'successful' if result else 'failed'}")

    # Test 4: publish text with exception as cause
    for i in range(number_of_issues) :
        try:
            raise CustomException("I am an exception")
        except Exception as e:
            print(f"Caught an ERSException: {e}")
            severity = SeverityLevel((i%5)+1).name
            issue_chain = publisher.publish(f"Exception found, causing a severity of {severity}", severity=severity, cause=e)
            print(f"Publishing issue from create_issue with exception: {'successful' if result else 'failed'}")

if __name__ == '__main__':
    cli()

